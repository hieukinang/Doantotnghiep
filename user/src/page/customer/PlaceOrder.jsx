import React, { useContext, useEffect, useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import Header from "../../component-home-page/Header";
import Footer from "../../component-home-page/Footer";
// üéØ Import ShopContext t·ª´ file b·∫°n v·ª´a g·ª≠i
import { ShopContext } from "../../context/ShopContext"; 

// ƒê·ªãnh nghƒ©a base URL c·ªßa API (d√πng cho coupon)
const API_BASE_URL = "http://127.0.0.1:5000/api/coupons";
const format = (v) => (v ? v.toLocaleString("vi-VN") : "0");

const PlaceOrder = () => {
  const navigate = useNavigate();
  // üéØ L·∫•y d·ªØ li·ªáu t·ª´ ShopContext
  const { cartItems, clientToken, fetchMyCart } = useContext(ShopContext) || { cartItems: [] };

  // L·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m ƒë√£ ch·ªçn v√† s·ªë l∆∞·ª£ng t·ª´ localStorage
  const checkedItemsFromCart = JSON.parse(localStorage.getItem("checkedItems") || "[]");
  const quantitiesFromCart = JSON.parse(localStorage.getItem("quantities") || "{}");

  // 1. L·ªçc v√† chu·∫©n b·ªã danh s√°ch s·∫£n ph·∫©m ƒë·∫∑t h√†ng (orderItems)
  const orderItems = cartItems?.filter(item => checkedItemsFromCart.includes(item.id))
    .map(it => {
      // D·ªØ li·ªáu variant ƒë√£ ƒë∆∞·ª£c l√†m gi√†u trong ShopContext
      const variant = it.CartItemProductVariant; 
      // Gi·∫£ ƒë·ªãnh product info n·∫±m trong variant (ho·∫∑c b·∫°n c·∫ßn ƒëi·ªÅu ch·ªânh theo c·∫•u tr√∫c API th·∫≠t)
      const product = variant?.ProductVariantProduct || { name: "S·∫£n ph·∫©m kh√¥ng r√µ t√™n" }; 
      
      return {
        // ID c·ªßa CartItem, d√πng ƒë·ªÉ x√°c ƒë·ªãnh s·∫£n ph·∫©m ƒë·∫∑t h√†ng
        id: it.id, 
        name: product.name,
        // L·∫•y gi√° v√† ph√≠ ship t·ª´ variant ƒë√£ ƒë∆∞·ª£c l√†m gi√†u
        price: variant?.price || 0,
        shippingFee: variant?.shipping_fee || 30000, 
        // L·∫•y s·ªë l∆∞·ª£ng t·ª´ localStorage (ho·∫∑c m·∫∑c ƒë·ªãnh l√† s·ªë l∆∞·ª£ng trong cartItem n·∫øu kh√¥ng c√≥ trong local)
        qty: quantitiesFromCart[it.id] || it.quantity || 1, 
        variantOptions: variant?.options,
        product_variantId: it.product_variantId, // C·∫ßn thi·∫øt cho API ƒë·∫∑t h√†ng
        storeId: product.storeId, // C·∫ßn thi·∫øt ƒë·ªÉ x·ª≠ l√Ω m√£ Store Coupon
      };
    }) || [];
    
    // üîî G·ª£i √Ω: N·∫øu orderItems r·ªóng, n√™n chuy·ªÉn h∆∞·ªõng ng∆∞·ªùi d√πng v·ªÅ trang gi·ªè h√†ng
    useEffect(() => {
        if (!clientToken) {
            navigate("/login");
            return;
        }
        if (orderItems.length === 0 && checkedItemsFromCart.length > 0) {
            // Tr∆∞·ªùng h·ª£p d·ªØ li·ªáu gi·ªè h√†ng b·ªã m·∫•t ƒë·ªìng b·ªô
            fetchMyCart(); 
        } else if (orderItems.length === 0 && checkedItemsFromCart.length === 0) {
             // navigate("/cart"); // C√≥ th·ªÉ c√¢n nh·∫Øc chuy·ªÉn v·ªÅ trang gi·ªè h√†ng
        }
    }, [clientToken, cartItems]);


  // ------------------- LOGIC ADDRESS -------------------
  // ... (Gi·ªØ nguy√™n logic ƒë·ªãa ch·ªâ t·ª´ phi√™n b·∫£n tr∆∞·ªõc)
  const [defaultAddress, setDefaultAddress] = useState(null);
  const [showAddressForm, setShowAddressForm] = useState(false);
  const [formData, setFormData] = useState({
    name: "", phone: "", city: "", ward: "", address: "", isDefault: false,
  });

  useEffect(() => {
    const saved = localStorage.getItem("defaultAddress");
    if (saved) {
      const addr = JSON.parse(saved);
      setDefaultAddress(addr);
    } else {
        setShowAddressForm(true);
    }
  }, []);

  const handleAddressChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: type === "checkbox" ? checked : value,
    }));
  };

  const handleSaveAddress = () => {
    if (!formData.name || !formData.phone || !formData.address) {
        alert("Vui l√≤ng ƒëi·ªÅn ƒë·ªß th√¥ng tin ƒë·ªãa ch·ªâ.");
        return;
    }
    setDefaultAddress(formData);
    setShowAddressForm(false);
    if (formData.isDefault) {
      localStorage.setItem("defaultAddress", JSON.stringify(formData));
    }
  };
  
  // ------------------- LOGIC COUPON (API CALL) -------------------
  const [appliedStoreCoupon, setAppliedStoreCoupon] = useState(null);
  const [appliedSystemCoupon, setAppliedSystemCoupon] = useState(null);
  const [appliedShipCoupon, setAppliedShipCoupon] = useState(null);
  const [couponCodeInput, setCouponCodeInput] = useState("");
  
  // S·ª≠ d·ª•ng axios ƒë·ªÉ g·ªçi API gi·ªëng trong ShopContext
  const fetchCouponByCode = async (code) => {
    try {
      const res = await axios.get(`${API_BASE_URL}/find-by-code?code=${code}`);
      
      if (res.data.status !== "success" || !res.data.data?.doc) {
        throw new Error("M√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá, kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ h·∫øt h·∫°n.");
      }
      return res.data.data.doc;
    } catch (error) {
      console.error("L·ªói khi t√¨m m√£ gi·∫£m gi√°:", error);
      alert(error.message || "ƒê√£ x·∫£y ra l·ªói khi √°p d·ª•ng m√£.");
      return null;
    }
  };

  const handleApplyCoupon = async () => {
    if (!couponCodeInput) return;
    const code = couponCodeInput.trim().toUpperCase();
    const coupon = await fetchCouponByCode(code);

    if (coupon) {
      // ‚ö†Ô∏è C·∫ßn ƒëi·ªÅu ch·ªânh logic ph√¢n lo·∫°i d·ª±a tr√™n c·∫•u tr√∫c API th·∫≠t c·ªßa b·∫°n
      const type = coupon.is_shipping_coupon ? 'SHIP' : 
                   (coupon.stores && coupon.stores.length > 0) ? 'STORE' : 
                   'SYSTEM'; 

      // Ki·ªÉm tra Store Coupon c√≥ √°p d·ª•ng ƒë∆∞·ª£c cho s·∫£n ph·∫©m ƒë√£ ch·ªçn kh√¥ng
      if (type === 'STORE') {
        // L·∫•y ID c·ª≠a h√†ng c·ªßa s·∫£n ph·∫©m ƒë·∫ßu ti√™n ƒë∆∞·ª£c ch·ªçn (gi·∫£ ƒë·ªãnh Store Coupon ch·ªâ √°p d·ª•ng cho 1 c·ª≠a h√†ng)
        const selectedStoreId = orderItems[0]?.storeId; 
        
        // Gi·∫£ ƒë·ªãnh: Coupon c√≥ danh s√°ch `stores`
        if (!coupon.stores?.includes(selectedStoreId)) {
            alert("M√£ n√†y ch·ªâ √°p d·ª•ng cho c·ª≠a h√†ng kh√°c.");
            return;
        }
        setAppliedStoreCoupon(coupon);

      } else if (type === 'SYSTEM') {
        setAppliedSystemCoupon(coupon);
      } else if (type === 'SHIP') {
        setAppliedShipCoupon(coupon);
      }
      
      alert(`√Åp d·ª•ng th√†nh c√¥ng m√£: ${coupon.code}`);
      setCouponCodeInput("");
    }
  };

  // ------------------- LOGIC T√çNH TO√ÅN -------------------

  // 1. T·∫°m t√≠nh (Subtotal)
  const productSubtotal = orderItems.reduce((s, i) => s + i.price * i.qty, 0);

  // 2. T√≠nh gi·∫£m gi√° h√†ng h√≥a (STORE + SYSTEM)
  let productDiscount = 0;
  
  // Gi·∫£m gi√° t·ª´ m√£ STORE 
  if (appliedStoreCoupon) {
      // **Ch·ªâ √°p d·ª•ng cho c√°c s·∫£n ph·∫©m c·ªßa c·ª≠a h√†ng t∆∞∆°ng ·ª©ng**
      const applicableSubtotal = orderItems.filter(i => i.storeId === appliedStoreCoupon.stores[0])
                                            .reduce((s, i) => s + i.price * i.qty, 0);
      
      if (appliedStoreCoupon.is_percent) {
          let discountAmount = applicableSubtotal * (appliedStoreCoupon.discount_value / 100);
          productDiscount += Math.min(discountAmount, appliedStoreCoupon.max_discount || Infinity);
      } else {
          productDiscount += appliedStoreCoupon.discount_value || 0;
      }
  }
  
  // Gi·∫£m gi√° t·ª´ m√£ SYSTEM 
  if (appliedSystemCoupon) {
      if (appliedSystemCoupon.is_percent) {
          let discountRate = appliedSystemCoupon.discount_value / 100;
          let discountAmount = productSubtotal * discountRate;
          productDiscount += Math.min(discountAmount, appliedSystemCoupon.max_discount || Infinity);
      } else {
          productDiscount += appliedSystemCoupon.discount_value || 0;
      }
  }
  
  // 3. T√≠nh Ph√≠ v·∫≠n chuy·ªÉn g·ªëc
  const baseShippingFee = orderItems.reduce((s, i) => s + i.shippingFee, 0);
  let finalShippingFee = baseShippingFee;
  let shipDiscount = 0;

  // 4. T√≠nh gi·∫£m gi√° v·∫≠n chuy·ªÉn (SHIP)
  if (appliedShipCoupon) {
      if (appliedShipCoupon.is_free_shipping) {
          shipDiscount = baseShippingFee;
          finalShippingFee = 0;
      } else if (appliedShipCoupon.discount_value) {
          shipDiscount = appliedShipCoupon.discount_value;
          finalShippingFee = Math.max(0, baseShippingFee - shipDiscount);
      }
  }

  // T·ªïng gi·∫£m gi√° (H√†ng h√≥a + Ship)
  const totalDiscount = productDiscount + shipDiscount;

  // 5. T·ªïng thanh to√°n cu·ªëi c√πng
  const totalPayment = productSubtotal - productDiscount + finalShippingFee;

  // ------------------- LOGIC ƒê·∫∂T H√ÄNG (API) -------------------
  
  const handlePlaceOrder = async () => {
    if (!defaultAddress || showAddressForm) {
        alert("Vui l√≤ng x√°c nh·∫≠n ƒë·ªãa ch·ªâ nh·∫≠n h√†ng.");
        return;
    }
    if (orderItems.length === 0) {
        alert("Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ ƒë·∫∑t h√†ng.");
        return;
    }
    
    // Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ g·ª≠i l√™n API ƒë·∫∑t h√†ng
    const orderData = {
        // ƒê·ªãa ch·ªâ nh·∫≠n h√†ng
        shipping_address: defaultAddress, 
        
        // Chi ti·∫øt s·∫£n ph·∫©m
        order_items: orderItems.map(item => ({
            product_variantId: item.product_variantId,
            quantity: item.qty,
            price_at_order: item.price,
            shipping_fee_at_order: item.shippingFee,
        })),
        
        // M√£ gi·∫£m gi√°
        coupon_codes: [
            appliedStoreCoupon?.code,
            appliedSystemCoupon?.code,
            appliedShipCoupon?.code,
        ].filter(Boolean),
        
        // T√≠nh to√°n t·ªïng ti·ªÅn
        total_amount: totalPayment,
        total_shipping_fee: finalShippingFee,
        total_discount: totalDiscount,
        
        // Ph∆∞∆°ng th·ª©c thanh to√°n (c·∫ßn l·∫•y t·ª´ input ng∆∞·ªùi d√πng)
        payment_method: "COD", 
    };

    try {
        const res = await axios.post(
            `${backendURL}/orders/checkout-cash`, // Gi·∫£ ƒë·ªãnh API ƒë·∫∑t h√†ng l√† /api/orders
            orderData,
            { headers: { Authorization: `Bearer ${clientToken}` } }
        );
        
        if (res.data.status === "success") {
            toast.success("ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh c√¥ng!");
            // üéØ Sau khi ƒë·∫∑t h√†ng th√†nh c√¥ng, g·ªçi l·∫°i fetchMyCart ƒë·ªÉ l√†m m·ªõi gi·ªè h√†ng
            await fetchMyCart(); 
            // X√≥a checkedItems v√† quantities kh·ªèi localStorage
            localStorage.removeItem("checkedItems");
            localStorage.removeItem("quantities");
            navigate(`/order-success/${res.data.data.doc.id}`); // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang th√†nh c√¥ng
        } else {
            alert(res.data.message || "ƒê·∫∑t h√†ng th·∫•t b·∫°i!");
        }

    } catch (error) {
        console.error("‚ùå L·ªói khi ƒë·∫∑t h√†ng:", error);
        alert(error.response?.data?.message || "ƒê·∫∑t h√†ng th·∫•t b·∫°i!");
    }
  };

  // ------------------- RETURN JSX -------------------
  return (
    <div className="min-h-screen flex flex-col bg-gray-50">
      <Header />
      <main className="pt-32 px-5 flex-1">
        <div className="max-w-6xl mx-auto grid grid-cols-1 lg:grid-cols-3 gap-6">
          <div className="lg:col-span-2 space-y-6">
            {/* ===================== ƒê·ªäA CH·ªà NH·∫¨N H√ÄNG ===================== */}
            <div className="bg-white rounded-lg p-5 shadow">
              <div className="font-semibold text-lg text-[#116AD1] border-b pb-2">
                üè† ƒê·ªãa ch·ªâ nh·∫≠n h√†ng
              </div>
              {defaultAddress && !showAddressForm ? (
                <div className="mt-3 text-sm">
                  <div className="font-medium">
                    **{defaultAddress.name}** ‚Ä¢ {defaultAddress.phone}{" "}
                    {localStorage.getItem("defaultAddress") && (
                      <span className="text-xs text-green-600 border border-green-600 px-1 rounded ml-1">
                        M·∫∑c ƒë·ªãnh
                      </span>
                    )}
                  </div>
                  <div className="text-gray-600">
                    {defaultAddress.address}, {defaultAddress.ward},{" "}
                    {defaultAddress.city}
                  </div>
                  <button
                    className="mt-3 px-3 py-1 border rounded text-sm text-[#116AD1] border-[#116AD1] hover:bg-[#116AD1] hover:text-white transition-colors"
                    onClick={() => {
                        setShowAddressForm(true);
                        setFormData(defaultAddress);
                    }}
                  >
                    Thay ƒë·ªïi / Th√™m ƒë·ªãa ch·ªâ kh√°c
                  </button>
                </div>
              ) : (
                <div className="mt-3 space-y-3 text-sm">
                    {defaultAddress && (
                        <button
                            className="text-sm text-red-500 underline mb-2"
                            onClick={() => setShowAddressForm(false)}
                        >
                            H·ªßy v√† d√πng ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh
                        </button>
                    )}
                  <input
                    name="name" placeholder="H·ªç v√† t√™n" value={formData.name} onChange={handleAddressChange}
                    className="w-full border rounded px-3 py-2"
                  />
                  <input
                    name="phone" placeholder="S·ªë ƒëi·ªán tho·∫°i" value={formData.phone} onChange={handleAddressChange}
                    className="w-full border rounded px-3 py-2"
                  />
                  <div className="grid grid-cols-2 gap-3">
                    <input
                        name="city" placeholder="T·ªânh/Th√†nh ph·ªë" value={formData.city} onChange={handleAddressChange}
                        className="w-full border rounded px-3 py-2"
                    />
                    <input
                        name="ward" placeholder="X√£/Ph∆∞·ªùng" value={formData.ward} onChange={handleAddressChange}
                        className="w-full border rounded px-3 py-2"
                    />
                  </div>
                  <input
                    name="address" placeholder="S·ªë nh√†, t√™n ƒë∆∞·ªùng" value={formData.address} onChange={handleAddressChange}
                    className="w-full border rounded px-3 py-2"
                  />
                  <label className="flex items-center gap-2 text-sm">
                    <input
                      type="checkbox" name="isDefault" checked={formData.isDefault} onChange={handleAddressChange}
                      className="accent-[#116AD1]"
                    />
                    ƒê·∫∑t l√†m ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh
                  </label>
                  <button
                    onClick={handleSaveAddress}
                    className="mt-2 px-4 py-2 bg-[#116AD1] text-white rounded hover:bg-[#0e57aa] disabled:bg-gray-400"
                    disabled={!formData.name || !formData.phone || !formData.address}
                  >
                    L∆∞u ƒë·ªãa ch·ªâ
                  </button>
                </div>
              )}
            </div>
            
            {/* ===================== S·∫¢N PH·∫®M ƒê√É CH·ªåN ===================== */}
            <div className="bg-white rounded-lg p-5 shadow">
              <div className="font-semibold text-lg border-b pb-2">
                üõçÔ∏è S·∫£n ph·∫©m
              </div>
              <div className="divide-y">
                {orderItems.map((i) => (
                  <div key={i.id} className="flex items-center justify-between py-3 text-sm">
                    <div className="flex-1 pr-4">
                        <span className="font-medium text-gray-800">{i.name}</span> x{i.qty}
                        <div className="text-xs text-gray-500">
                            {i.variantOptions?.length > 0 && 
                                i.variantOptions
                                .filter(opt => opt.value)
                                .map((opt, idx) => (
                                    <span key={idx} className="mr-2">
                                        {opt.name}: {opt.value}
                                    </span>
                                ))
                            }
                        </div>
                    </div>
                    <div className="font-semibold">{format(i.price * i.qty)}‚Ç´</div>
                  </div>
                ))}
                {orderItems.length === 0 && (
                    <div className="py-3 text-gray-500 text-sm">Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ ƒë·∫∑t h√†ng.</div>
                )}
              </div>
              <Link to="/cart" className="mt-3 text-sm text-[#116AD1] underline block">
                Ch·ªânh s·ª≠a s·∫£n ph·∫©m
              </Link>
            </div>

            {/* ===================== M√É GI·∫¢M GI√Å (API) ===================== */}
            <div className="bg-white rounded-lg p-5 shadow">
              <div className="font-semibold text-lg border-b pb-2">
                üè∑Ô∏è M√£ gi·∫£m gi√°
              </div>
              
              <div className="mt-3 flex items-center gap-2">
                <input
                    type="text"
                    placeholder="Nh·∫≠p m√£ gi·∫£m gi√°"
                    value={couponCodeInput}
                    onChange={(e) => setCouponCodeInput(e.target.value)}
                    className="flex-1 border rounded px-3 py-2 text-sm"
                />
                <button
                    onClick={handleApplyCoupon}
                    className="px-4 py-2 bg-[#116AD1] text-white rounded hover:bg-[#0e57aa]"
                    disabled={!couponCodeInput}
                >
                    √Åp d·ª•ng
                </button>
              </div>

              <div className="mt-4 space-y-3 text-sm">
                <div className="text-gray-700 font-medium">M√£ ƒë√£ √°p d·ª•ng:</div>
                
                <div className="border p-3 rounded bg-gray-50">
                    <div className="font-medium">M√£ t·ª´ c·ª≠a h√†ng:</div>
                    {appliedStoreCoupon ? (
                        <div className="flex justify-between items-center text-green-600 mt-1">
                            <span>**{appliedStoreCoupon.code}** (Gi·∫£m: {appliedStoreCoupon.is_percent ? appliedStoreCoupon.discount_value + "%" : format(appliedStoreCoupon.discount_value) + "‚Ç´"})</span>
                            <button onClick={() => setAppliedStoreCoupon(null)} className="text-red-500 text-xs underline">H·ªßy</button>
                        </div>
                    ) : (
                        <div className="text-gray-500 mt-1">Ch∆∞a √°p d·ª•ng.</div>
                    )}
                </div>
                
                <div className="border p-3 rounded bg-gray-50">
                    <div className="font-medium">M√£ to√†n h·ªá th·ªëng (s·∫£n ph·∫©m):</div>
                    {appliedSystemCoupon ? (
                        <div className="flex justify-between items-center text-green-600 mt-1">
                            <span>**{appliedSystemCoupon.code}** (Gi·∫£m: {appliedSystemCoupon.is_percent ? appliedSystemCoupon.discount_value + "%" : format(appliedSystemCoupon.discount_value) + "‚Ç´"})</span>
                            <button onClick={() => setAppliedSystemCoupon(null)} className="text-red-500 text-xs underline">H·ªßy</button>
                        </div>
                    ) : (
                        <div className="text-gray-500 mt-1">Ch∆∞a √°p d·ª•ng.</div>
                    )}
                </div>

                <div className="border p-3 rounded bg-gray-50">
                    <div className="font-medium">M√£ v·∫≠n chuy·ªÉn:</div>
                    {appliedShipCoupon ? (
                        <div className="flex justify-between items-center text-green-600 mt-1">
                            <span>**{appliedShipCoupon.code}** (Gi·∫£m: {appliedShipCoupon.is_free_shipping ? "Mi·ªÖn ph√≠" : format(appliedShipCoupon.discount_value) + "‚Ç´"})</span>
                            <button onClick={() => setAppliedShipCoupon(null)} className="text-red-500 text-xs underline">H·ªßy</button>
                        </div>
                    ) : (
                        <div className="text-gray-500 mt-1">Ch∆∞a √°p d·ª•ng.</div>
                    )}
                </div>
              </div>
            </div>

            {/* ===================== PH∆Ø∆†NG TH·ª®C THANH TO√ÅN ===================== */}
            <div className="bg-white rounded-lg p-5 shadow">
              <div className="font-semibold text-lg border-b pb-2">
                üí≥ Ph∆∞∆°ng th·ª©c thanh to√°n
              </div>
              <div className="mt-3 grid grid-cols-2 gap-3 text-sm">
                {/* ‚ö†Ô∏è C·∫ßn th√™m logic l∆∞u tr·ªØ ph∆∞∆°ng th·ª©c thanh to√°n ƒë√£ ch·ªçn */}
                <label className="flex items-center gap-2 border rounded px-3 py-2 cursor-pointer hover:border-[#116AD1]">
                  <input name="pm" type="radio" defaultChecked className="accent-[#116AD1]" />
                  **COD** - Thanh to√°n khi nh·∫≠n
                </label>
                <label className="flex items-center gap-2 border rounded px-3 py-2 cursor-pointer hover:border-[#116AD1]">
                  <input name="pm" type="radio" className="accent-[#116AD1]" />
                  V√≠ KOHI
                </label>
              </div>
            </div>
          </div>

          {/* ===================== T·ªîNG K·∫æT THANH TO√ÅN ===================== */}
          <div className="bg-white rounded-lg shadow p-5 h-fit">
            <div className="font-semibold text-lg border-b pb-2 mb-3">
                üí∞ Chi ti·∫øt thanh to√°n
            </div>

            {/* T·∫°m t√≠nh */}
            <div className="flex justify-between text-sm py-1">
              <span>T·∫°m t√≠nh (Gi√° g·ªëc)</span>
              <span className="font-medium">{format(productSubtotal)}‚Ç´</span>
            </div>
            
            {/* Gi·∫£m gi√° h√†ng h√≥a */}
            <div className="flex justify-between text-sm py-1">
                <span className={productDiscount > 0 ? "text-red-500" : ""}>Gi·∫£m gi√° h√†ng h√≥a</span>
                <span className={`font-medium ${productDiscount > 0 ? "text-red-500" : ""}`}>
                    - {format(Math.round(productDiscount))}‚Ç´
                </span>
            </div>
            
            {/* Ph√≠ v·∫≠n chuy·ªÉn g·ªëc */}
            <div className="flex justify-between text-sm py-1">
              <span>Ph√≠ v·∫≠n chuy·ªÉn (G·ªëc)</span>
              <span className="font-medium">{format(baseShippingFee)}‚Ç´</span>
            </div>
            
            {/* Gi·∫£m ph√≠ v·∫≠n chuy·ªÉn */}
            <div className="flex justify-between text-sm py-1">
                <span className={shipDiscount > 0 ? "text-red-500" : ""}>Gi·∫£m ph√≠ v·∫≠n chuy·ªÉn</span>
                <span className={`font-medium ${shipDiscount > 0 ? "text-red-500" : ""}`}>
                    - {format(Math.round(shipDiscount))}‚Ç´
                </span>
            </div>
            
            <div className="h-px bg-gray-200 my-3" />
            
            {/* T·ªïng thanh to√°n */}
            <div className="flex justify-between text-xl">
              <span className="font-bold">T·ªïng thanh to√°n</span>
              <span className="text-[#116AD1] font-bold">
                {format(Math.round(totalPayment))}‚Ç´
              </span>
            </div>
            
            <button
              onClick={handlePlaceOrder}
              className="mt-4 w-full text-center bg-[#116AD1] text-white py-3 rounded-lg font-semibold text-lg hover:bg-[#0e57aa] disabled:bg-gray-400"
              disabled={orderItems.length === 0 || !defaultAddress || showAddressForm}
            >
              ƒê·∫∑t h√†ng
            </button>
            <Link
              to="/"
              className="mt-3 block text-center border border-[#116AD1] text-[#116AD1] py-2 rounded-lg hover:bg-[#116AD1] hover:text-white transition-colors"
            >
              Ti·∫øp t·ª•c mua s·∫Øm
            </Link>
          </div>
        </div>
      </main>
      <Footer />
    </div>
  );
};

export default PlaceOrder;