import Address from "./addressModel.js";
import Admin from "./adminModel.js";
import Client from "./clientModel.js";
import StoreBanner from "./storeBannerModel.js";
import Banner from "./bannerModel.js";
import Cart from "./cartModel.js";
import CartItem from "./cartItemModel.js";
import Complaint from "./complaintModel.js";
import Attribute from "./attributeModel.js";
import Category from "./categoryModel.js";
import VariantOption from "./variantOptionModel.js";
import ComplaintImage from "./complaintImageModel.js";
import Conversation from "./conversationModel.js";
import Message from "./messageModel.js";
import Coupon from "./couponModel.js";
import Favorite from "./favoriteModel.js";
import Follow from "./followModel.js";
import OrderItem from "./orderItemModel.js";
import Order from "./orderModel.js";
import ProductImage from "./productImageModel.js";
import Product from "./productModel.js";
import ProductVariant from "./productVariantModel.js";
import Review from "./reviewModel.js";
import Shipper from "./shipperModel.js";
import Store from "./storeModel.js";
import Notification from "./notificationModel.js";

// Define associations

Address.belongsTo(Client, { foreignKey: "clientId", as: "AddressClient" });
Admin.hasMany(Banner, { foreignKey: "adminId", as: "AdminBanners" });
Admin.hasMany(Notification, { foreignKey: "adminId", as: "AdminNotifications" });
Admin.hasMany(Complaint, { foreignKey: "adminId", as: "AdminComplaints" });
Attribute.belongsTo(Category, { foreignKey: "categoryId", as: "AttributeCategory" });
Attribute.hasMany(VariantOption, { foreignKey: "attributeId", as: "AttributeVariantOptions" });
Banner.belongsTo(Admin, { foreignKey: "adminId", as: "BannerAdmin" });
CartItem.belongsTo(Cart, { foreignKey: "cartId", as: "CartItemCart" });
CartItem.belongsTo(Product, { foreignKey: "productId", as: "CartItemProduct" });
Cart.belongsTo(Client, { foreignKey: "clientId", as: "CartClient" });
Cart.hasMany(CartItem, { foreignKey: "cartId", as: "CartItems" });
Category.hasMany(Attribute, { foreignKey: "categoryId", as: "CategoryAttributes", onDelete: "CASCADE" });
Category.hasMany(Product, { foreignKey: "categoryId", as: "CategoryProducts" });
Client.hasMany(Address, { foreignKey: "clientId", as: "ClientAddresses" });
Client.hasOne(Cart, { foreignKey: "clientId", as: "ClientCart" });
Client.hasMany(Complaint, { foreignKey: "clientId", as: "ClientComplaints" });
Client.hasMany(Favorite, { foreignKey: "clientId", as: "ClientFavorites" });
Client.hasMany(Follow, { foreignKey: "clientId", as: "ClientFollows" });
Client.hasMany(Order, { foreignKey: "clientId", as: "ClientOrders" });
Client.hasMany(Review, { foreignKey: "clientId", as: "ClientReview" });
ComplaintImage.belongsTo(Complaint, { foreignKey: "complaintId", as: "ComplaintImageComplaint" });
Complaint.belongsTo(Client, { foreignKey: "clientId", as: "ComplaintClient" });
Complaint.belongsTo(Admin, { foreignKey: "adminId", as: "ComplaintAdmin" });
Complaint.belongsTo(Store, { foreignKey: "storeId", as: "ComplaintStore" });
Complaint.belongsTo(Shipper, { foreignKey: "shipperId", as: "ComplaintShipper" });
Complaint.hasMany(ComplaintImage, { foreignKey: "complaintId", as: "ComplaintImages" });
Conversation.hasMany(Message, { foreignKey: "conversationId", as: "ConversationMessages" });
Coupon.belongsTo(Product, { foreignKey: "productId", as: "CouponProduct" });
Favorite.belongsTo(Client, { foreignKey: "clientId", as: "FavoriteClient" });
Favorite.belongsTo(Product, { foreignKey: "productId", as: "FavoriteProduct" });
Follow.belongsTo(Store, { foreignKey: "storeId", as: "FollowStore" });
Follow.belongsTo(Client, { foreignKey: "clientId", as: "FollowClient" });
Message.belongsTo(Conversation, { foreignKey: "conversationId", as: "MessageConversation" });
Notification.belongsTo(Admin, { foreignKey: "adminId", as: "NotificationAdmin" });
OrderItem.belongsTo(Order, { foreignKey: "orderId", as: "OrderItemOrder" });
OrderItem.belongsTo(ProductVariant, { foreignKey: "product_variantId", as: "OrderItemProductVariant" });
Order.belongsTo(Client, { foreignKey: "clientId", as: "OrderClient" });
Order.belongsTo(Shipper, { foreignKey: "shipperId", as: "OrderShipper" });
Order.hasOne(Review, { foreignKey: "orderId", as: "OrderReview" });
Order.hasMany(OrderItem, { foreignKey: "orderId", as: "OrderItems" });
ProductImage.belongsTo(Product, { foreignKey: "productId", as: "ProductImageProduct" });
Product.belongsTo(Category, { foreignKey: "categoryId", as: "ProductCategory" });
Product.belongsTo(Store, { foreignKey: "storeId", as: "ProductStore" });
Product.hasMany(CartItem, { foreignKey: "productId", as: "ProductCartItems" });
Product.hasMany(Coupon, { foreignKey: "productId", as: "ProductCoupons" });
Product.hasMany(Favorite, { foreignKey: "productId", as: "ProductFavorites" });
Product.hasMany(ProductImage, { foreignKey: "productId", as: "ProductImages" });
Product.hasMany(ProductVariant, { foreignKey: "productId", as: "ProductVariants" });
Product.hasMany(Review, { foreignKey: "productId", as: "ProductReviews" });
ProductVariant.belongsTo(Product, { foreignKey: "productId", as: "ProductVariantProduct" });
ProductVariant.hasMany(VariantOption, { foreignKey: "product_variantId", as: "ProductVariantOptions" });
ProductVariant.hasMany(OrderItem, { foreignKey: "product_variantId", as: "ProductVariantOrderItems" });
Review.belongsTo(Client, { foreignKey: "clientId", as: "ReviewClient" });
Review.belongsTo(Product, { foreignKey: "productId", as: "ReviewProduct" });
Review.belongsTo(Order, { foreignKey: "orderId", as: "ReviewOrder" });
Shipper.hasMany(Complaint, { foreignKey: "shipperId", as: "ShipperComplaints" });
Shipper.hasMany(Order, { foreignKey: "shipperId", as: "ShipperOrders" });
StoreBanner.belongsTo(Store, { foreignKey: "storeId", as: "StoreBannerStore" });
Store.hasMany(Product, { foreignKey: "storeId", as: "StoreProducts" });
Store.hasMany(Complaint, { foreignKey: "storeId", as: "StoreComplaints" });
Store.hasMany(Follow, { foreignKey: "storeId", as: "StoreFollows" });
Store.hasMany(StoreBanner, { foreignKey: "storeId", as: "StoreBanners" });
VariantOption.belongsTo(ProductVariant, { foreignKey: "product_variantId", as: "VariantOptionProductVariant" });
VariantOption.belongsTo(Attribute, { foreignKey: "attributeId", as: "VariantOptionAttribute" });